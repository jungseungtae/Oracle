-- function --
1.
create or replace function fun
(v_dept in stu_dept%type)
return number
is  
v_stddev number;
begin
    select stddev(enr_grade) into v_stddev
    from student natural join enrol
    where stu_dept = v_dept;
    return v_stddev;
end fun;
/
variable dt number;
execute :dt :=fun('기계');
print dt;

--
2.
create or replace function test00000
(v_sal in number)
return varchar2
is v_ename varchar2(10);
begin
    select ename into v_ename from emp 
    where sal=(select max(sal) from emp);
    return (v_ename);
end test00000;
/
variable nameK varchar2;

execute : nameK :=test00000(2000);
print nameK;

--
3.
create or replace FUNCTION test20
(v_enr_grade in number)
return CHAR
is
    enr_score char;
begin
    if v_enr_grade >= 90 then enr_score := 'A';
        ELSIF v_enr_grade >= 90 then enr_score := 'B';
            ELSE enr_score := 'F';
                end if;
                return (enr_score);
    end test20;
/

variable dd char;

execute :dd :=test20(95);

print dd;

--
4.
create or replace function prf1
(v_sub_no in subject.sub_no%TYPE)
RETURN VARCHAR2
IS
v_sub_prof VARCHAR(20);
begin
    select sub_prof  into v_sub_prof
    from subject
    where v_sub_no = sub_no;
    return v_sub_prof;
end prf1;
/
select prf1(107) from subject;

variable dt number;
execute :dt :=fun('기계');
print dt;

select * from subject;

--
5.
create or replace procedure test7
is
v_stu_no enrol.stu_no%TYPE;
v_sub_no enrol.sub_no%TYPE;
v_enr_grade enrol.enr_grade%TYPE;
CURSOR t_cursor IS
    select stu_no, sub_no, enr_grade
    from enrol
    where sub_no=101;
    
BEGIN
  OPEN t_cursor;
  LOOP
        FETCH t_cursor into v_stu_no, v_sub_no, v_enr_grade;
        EXIT WHEN t_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_stu_no||' '|| v_sub_no||' '|| v_enr_grade);      
        END LOOP;
        CLOSE t_cursor;
END test7;
/
EXECUTE test7;

--

-- cust, video, rent
--고객 테이블의 구조를 검색해라. (3점)
desc cust;
--고객 테이블의 고객이름, 등급, 주소를 검색해라. (3점)
select c_name, c_flag, c_addr
from cust;
--비디오이름과 고객번호, 반납일을 equi join, natural join, join~using을 다 써서 검색해라. (10점)
select v_name, c_no, r_date
from video NATURAL JOIN rent;

select v_name, c_no, r_date
from video JOIN rent USING(v_no);

select v_name, c_no, r_date
from video, rent
where rent.v_no = video.v_no;

--이영수 고객이 대여한 비디오이름과 주연배우를 검색해라. (3점)
select v_name, v_actor
from video,cust,rent
where c_name = '이영수'
and cust.c_no = rent.c_no
and rent.v_no = video.v_no;

--기생충을 대여한 고객들의 고객번호와 이름을 검색해라. (3점)
select c_no, c_name
from cust NATURAL JOIN rent
where v_no =
(select v_no
from video
where v_name like '기생충');

--등급이 1등급인 고객이 대여한 비디오 이름을 모두 검색해라. (3점)
select DISTINCT v_name
from rent NATURAL JOIN video
where c_no in
(select c_no
from cust
where c_flag = 1);

SELECT v_name 
FROM cust, video, rent 
WHERE rent.v_no = video.v_no 
AND rent.c_no = cust.c_no 
AND c_flag = 1;

--대여료가 2000원 이상인 고객의 수를 검색해라. (3점)
select COUNT(*)
from cust NATURAL JOIN rent
where r_rentfee >= 2000;

--고객번호가 103보다 작은 값만 나오도록 대여테이블을 복사하여 a_rent 테이블을 만든다. (5점)
create table a_rent
as select * 
from rent
where c_no <103;

--위에서 만든 a_rent테이블에 (9, 2020-08-01, 101, 1000, 3)을 삽입한다. (3점)
desc a_rent;
insert into a_rent values
(9, to_date(20200801), 101, 1000, 3);

--대여테이블의 ‘10’ 으로 시작하는 고객 데이터를 a_rent 테이블에 삽입한후, 내용을 확인해라. (5점)
create table a_rent
as select * 
from rent
where c_no like '10%';

--고객번호를 입력으로 고객이름을 검색하는 프로시저를 만들어라.
create or replace PROCEDURE cno
(v_c_no in cust.c_no %type,
v_c_name out cust.c_name%type)
is begin
    select c_name into v_c_name
    from cust
    where c_no = v_c_no;
    end cno;
/
variable p_name varchar2(20);
execute cno(101,:p_name);

print p_name;